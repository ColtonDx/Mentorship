---
- name: Configure PostgreSQL Database
  hosts: db
  become: yes
  gather_facts: yes

  tasks:
    - name: Install PostgreSQL
      apt:
        name:
          - python3-pip
          - libpq-dev
          - postgresql
          - acl
        state: present
        update_cache: yes

    - name: Install psycopg2-binary with pip
      pip:
        name: psycopg2-binary
        executable: pip3

    - name: Start PostgreSQL service
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Set PostgreSQL user to use trust authentication
      lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        regexp: '^local\s+all\s+postgres\s+peer$'
        line: 'local all postgres trust'
        state: present

    - name: Restart PostgreSQL service
      service:
        name:

    - name: Configure PostgreSQL to allow all incoming connections
      lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        regexp: '^(host\s+all\s+all\s+127.0.0.1/32\s+md5)'
        line: 'host all all 0.0.0.0/0 md5'
        state: present

    - name: Listen for all connections
      lineinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        regexp: '^#?(listen_addresses)\s*=\s*\S+'
        line: "listen_addresses = '*'"
        state: present

    - name: Create PostgreSQL database
      postgresql_db:
        name: mydatabase
        state: present

    - name: Create PostgreSQL user
      postgresql_user:
        name: mydbuser
        password: MyDBPassword
        state: present

    - name: Grant all privileges on database
      postgresql_privs:
        db: mydatabase
        role: mydbuser
        type: database
        privs: ALL

    - name: Restart PostgreSQL service
      service:
        name: postgresql
        state: restarted

    - name: Create users table
      postgresql_db:
        name: mydatabase
        state: present
        encoding: UTF-8
        template: template0
      register: db_creation

    - name: Create users table if it does not exist
      postgresql_query:
        db: mydatabase
        query: |
          DO $$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'users') THEN
              CREATE TABLE users (first_name varchar(255), last_name varchar(255));
            END IF;
          END $$;
    - name: Add user John Doe to users table
      become_user: postgres
      postgresql_query:
        db: mydatabase
        query: "INSERT INTO users (first_name, last_name) VALUES ('John', 'Doe');"

    - name: Add user Colton Dixon to users table
      become_user: postgres
      postgresql_query:
        db: mydatabase
        query:  "INSERT INTO users (first_name, last_name) VALUES ('Colton', 'Dixon');"

    - name: Grant all privileges on users table to mydbuser
      #become_user: postgres
      postgresql_privs:
        db: mydatabase
        role: mydbuser
        type: table
        objs: users
        privs: ALL
